input {
    udp {
        port => 9910
    }
}


filter {
  #### OVPN 0 OUT
  if [message] =~ /OVPN 0 OUT/  {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 0 OUT: '%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} TCP connection established with \[AF_INET\]%{IPORHOST:client_ip}:%{POSINT:client_port}'" }
      add_tag => [ "_grok_ovpn0_out_connection_success", "matched" ]
    }
    
    if "matched" not in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 0 OUT: '%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{IPORHOST:client_ip}:%{POSINT:client_port} %{GREEDYDATA:message}" }
        add_tag => [ "_grok_ovpn0_out_ipport_success", "matched" ]
        overwrite => [ "message" ]
        remove_tag => [ "_grokparsefailure" ]
      }
    }

    if "matched" not in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 0 OUT: '%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{GREEDYDATA:message}" }
        add_tag => [ "_grok_ovpn0_out_success", "matched" ]
        overwrite => [ "message" ]
        remove_tag => [ "_grokparsefailure" ]
      }
    }

    mutate {
      add_field => { "messageSource" => "OVPN 0 OUT" }
    }

  }

  #### LOG ERR
  if [message] =~ /LOG ERR/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] LOG ERR: \"%{GREEDYDATA:message}\"" }
      add_tag => [ "_grok_log_err_success", "matched" ]
      overwrite => [ "message" ]
    }

    mutate {
      add_field => { "messageSource" => "LOG ERR" }
    }

  }
  
  #### OVPN 1 OUT 
  if [message] =~ /OVPN 1 OUT/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 1 OUT: '%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{IPORHOST:client_ip}:%{POSINT:client_port} \[%{USER:username}\] %{GREEDYDATA:message}'" }
      add_tag => [ "_grok_ovpn1_out_ipport_user_success", "matched" ]
      overwrite => [ "message" ]
    }

    if "matched" not in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 1 OUT: '%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{USERNAME:username}/%{IPORHOST:client_ip}:%{POSINT:client_port} %{GREEDYDATA:message}'" }
        add_tag => [ "_grok_ovpn1_out_user_ipport_success", "matched" ]
        overwrite => [ "message" ]
        remove_tag => [ "_grokparsefailure" ]
      }
    }

    if "matched" not in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 1 OUT: \"%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{USERNAME:username}/%{IPORHOST:client_ip}:%{POSINT:client_port} %{GREEDYDATA:message}\"" }
        add_tag => [ "_grok_ovpn1_out_user_ipport_success", "matched" ]
        overwrite => [ "message" ]
        remove_tag => [ "_grokparsefailure" ]
      }
    }

    if "matched" not in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 1 OUT: '%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{IPORHOST:client_ip}:%{POSINT:client_port} %{GREEDYDATA:message}'" }
        add_tag => [ "_grok_ovpn1_out_ipport_success", "matched" ]
        overwrite => [ "message" ]
        remove_tag => [ "_grokparsefailure" ]
      }
    }

    if "matched" not in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] OVPN 1 OUT: \"%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{GREEDYDATA:message}\"" }
        add_tag => [ "_grok_ovpn1_out_success", "matched" ]
        overwrite => [ "message" ]
        remove_tag => [ "_grokparsefailure" ]
      }
    }

    mutate {
      add_field => { "messageSource" => "OVPN 1 OUT" }
    }
  }

  #### AUTH SUCCESS 
  if [message] =~ /AUTH SUCCESS/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] AUTH SUCCESS %{GREEDYDATA:message}" }
      add_tag => [ "_grok_auth_success_success", "matched" ]
      overwrite => [ "message" ]
    }
    mutate {
      add_field => { "messageSource" => "AUTH SUCCESS" }
    }
  }

  #### VPN Auth Failed
  if [message] =~ /VPN Auth Failed/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] VPN Auth Failed: '%{GREEDYDATA:message}" }
      add_tag => [ "_grok_vpn_auth_failed_success", "matched" ]
      overwrite => [ "message" ]
    }
    mutate {
      add_field => { "messageSource" => "VPN Auth Failed" }
    }
  }

  #### WEB OUT
  if [message] =~ /WEB OUT/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[-\] WEB OUT: '%{TIMESTAMP_ISO8601:event_timestamp} \[-\] %{GREEDYDATA:message}'" }
      add_tag => [ "_grok_web_out_success", "matched" ]
      overwrite => [ "message" ]
    } 

    mutate {
      add_field => { "messageSource" => "WEB OUT" }
    }

  }

  mutate {
    remove_tag => [ "matched" ]
  }

  if [client_ip]  {
    geoip {
      add_tag => [ "GeoIP" ]
      source => "client_ip"
    }
  }

  mutate {
    add_field => [ "received_at", "%{timestamp}" ]
  }

  mutate {
    add_field => { "bc_customerName" => "${BC_CUSTOMER_NAME}" }
    add_field => { "bc_messageType" => "openvpn" }
    add_field => { "bc_apiToken" => "${BC_API_TOKEN}" }
  }
}

output {
    stdout { codec => json }
      http {
        url => "${BC_URL}"
        http_method => "post"
        format => "json"
      }
}


