
Description: >
  Deploy openvpn-integration Logstash Docker on Fargate for logging to Bridgecrew.
  Uses source CIDR range to allow ingress traffic
  Requires an existing VPC that can talk to your OpenVPN instance as well as egress to the internet. 
  Ideally a private subnet with NAT gateway.

Parameters:
  vpcId:
    Type: AWS::EC2::VPC::Id
    Description: An existing VPC ID where your servers exist

  subnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Subnets to use within your VPC

  sourceCidrBlock:
    Type: String
    Description: The source CIDR to allow to communicate with Logstash (i.e. 10.0.0.0/16) 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  dnsNamespace:
    Type: String
    Description: The private DNS namespace to create for resolution of the logstash container
    Default: bridgecrew.local

  containerImage:
    Type: String
    Description: The location of the openvpn-integration Docker image
    Default: https://hub.docker.com/r/bridgecrew/openvpn-integration:latest

  bcCustomerName:
    Type: String
    Description: Your Bridgecrew customer name

  bcApiToken:
    Type: String
    Description: Your Bridgecrew API token

  bcUrl:
    Type: String
    Description: The URL to connect to Bridgecrew
    Default: https://logstash.bridgecrew.cloud/logstash

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Account Configuration"
        Parameters:
          - vpcId
          - subnetIds
          - dnsNamespace
          - containerImage
          - sourceCidrBlock
      -
        Label:
          default: "Bridgecrew Configuration"
        Parameters:
          - bcCustomerName
          - bcApiToken
          - bcUrl
    ParameterLabels:
      vpcId:
        default: "VPC ID"
      subnetIds:
        default: "Subnet IDs"
      sourceCidrBlock:
        default: "Source CIDR Block"
      dnsNamespace:
        default: "Private DNS Namespace"
      containerImage:
        default: "Container Image"
      bcCustomerName:
        default: "Customer Name"
      bcApiToken:
        default: "API Token"
      bcUrl:
        default: "Bridgecrew URL"

Resources:
  # ECS Cluster Definition
  bridgecrewCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "bridgecrew-cluster"
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled

  # ECS Task Security Group Definition
  taskSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: "bridgecrew-openvpn-tasksg" 
        GroupDescription: "Controls access to logstash containers from OpenVPN hosts"
        VpcId: 
          Ref: vpcId
        SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 9910
          ToPort: 9910
          CidrIp: !Ref sourceCidrBlock
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  # ECS Task Execution Role - Log to CloudWatch - Uncomment ECR if applicable
  taskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "bridgecrew-fargate-openvpn-task-execution-role"
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
                Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
        - PolicyName: task_execution_policy
          PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  # - "ecr:GetAuthorizationToken"
                  # - "ecr:BatchCheckLayerAvailability"
                  # - "ecr:GetDownloadUrlForLayer"
                  # - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

  # AWS Service Discovery / Route 53 
  ecsDiscoveryNamespace:
      Type: AWS::ServiceDiscovery::PrivateDnsNamespace
      Properties:
          Name: !Ref dnsNamespace
          Description: "Bridgecrew Integrations Service Discovery"
          Vpc: !Ref vpcId

  ecsDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Name: bridgecrew-openvpn-integration
      DnsConfig:
        DnsRecords:
          - TTL: 10
            Type: A
        RoutingPolicy: MULTIVALUE
      NamespaceId: !Ref ecsDiscoveryNamespace

  # ECS Container and Task Definition
  openvpnTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "bridgecrew-openvpn-integration-td"
      Cpu: 1024
      Memory: 3072
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref taskExecutionRole
      ContainerDefinitions:
        - Name: "bridgecrew-openvpn-integration"
          Image: !Ref containerImage
          Cpu: 1024
          Memory: 3072
          MemoryReservation: 3072
          Essential: true
          PortMappings:
            - ContainerPort: 9910
              HostPort: 9910
              Protocol: "udp"
          Environment:
            - Name: "BC_CUSTOMER_NAME"
              Value: !Ref bcCustomerName
            - Name: "BC_API_TOKEN"
              Value: !Ref bcApiToken
            - Name: "BC_URL"
              Value: !Ref bcUrl
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: "/ecs/bridgecrew-openvpn-integration"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "ecs"

  ecsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/bridgecrew-openvpn-integration"
      RetentionInDays: 30


  # ECS Service Definition
  bridgecrewOpenvpnIntegration:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "bridgecrew-openvpn-integration" 
      Cluster: !Ref bridgecrewCluster
      TaskDefinition: !Ref openvpnTask
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref taskSg
          Subnets: !Ref subnetIds
          AssignPublicIp: ENABLED
      ServiceRegistries:
        - RegistryArn: !GetAtt ecsDiscoveryService.Arn

Outputs:
  bridgecrewClusterId:
    Description: ECS Fargate Cluster
    Value: !Ref bridgecrewCluster
  bridgecrewServiceDiscoveryHostedZone:
    Description: Private Hosted Zone for ECS Service Discovery
    Value: !Ref ecsDiscoveryNamespace
