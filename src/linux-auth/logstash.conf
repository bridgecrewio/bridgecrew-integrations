input {
    udp {
        port => 9910
        type => "auth"
    }
}


filter {
    if [type] == "auth" {
	grok {
	    match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
	    overwrite => [ "message" ]
	}
	date {
	    locale => "en"
	    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"  ]
	    timezone => "Etc/UTC"
	}

	if [message] =~ /^pam_/ {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{PAM}" }
		add_tag => [ "_grok_pam_success" ]
	    }
	    if [pam_kvdata] {
		mutate {
		    gsub => [ "pam_kvdata", "= ", '=- ' ]
		}
		kv {
		    source => "pam_kvdata"
		    prefix => "pam_"
		}
		mutate {
		    remove_field => [ "pam_kvdata" ]
		}
	    }
	}

	if [program] == "sshd" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SSH_AUTHFAIL_WRONGCREDS}" }
		add_field => { "ssh_authresult" => "fail" "ssh_failreason" => "wrong_credentials" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SSH_AUTHFAIL_WRONGUSER}" }
		add_field => { "ssh_authresult" => "fail" "ssh_failreason" => "unknown_user" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SSH_AUTH_SUCCESS}" }
		add_field => { "ssh_authresult" => "success" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SSH_DISCONNECT}" }
		add_tag => [ "_grok_sshd_success", "matched", "ssh_disconnect" ]
	    }
	    mutate {
		remove_tag => [ "matched", "_grokparsefailure" ]
	    }
	    geoip {
		source => "ssh_client_ip"
	    }
	}

	if [program] == "sudo" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SUDO}" }
		add_tag => [ "_grok_sudo_success" ]
	    }
	}

	if [program] == "su" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SU}" }
		add_tag => [ "_grok_su_success" ]
	    }
	}

	if [program] == "systemd-logind" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{SYSTEMD_LOGIND}" }
		add_tag => [ "_grok_systemd_logind_success" ]
	    }
	}

	if [program] in [ "useradd", "groupadd" ] {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{ACCOUNT_ADD}" }
		add_field => { "account_action" => "create" }
		add_tag => [ "_grok_new_account_success" ]
	    }
	    if [account_kvdata] {
		mutate {
		    gsub => [ "account_kvdata", ", ", '|' ]
		}
		kv {
		    source => "account_kvdata"
		    prefix => "account_"
		    field_split => "|"
		}
		mutate {
		    remove_field => [ "account_kvdata" ]
		}
	    }
	}

	if [program] == "usermod" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{USERMOD}" }
		add_tag => [ "_grok_usermod_success" ]
	    }
	}

	if [program] == "userdel" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{USERDEL}" }
		add_tag => [ "_grok_userdel_success" ]
	    }
	    mutate {
		gsub => [ "account_action", "remove", "delete" ]
	    }
	}

	if [program] == "groupdel" {
	    grok {
		patterns_dir   => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"
		match => { "message" => "%{GROUPDEL}" }
		add_field => { "account_action" => "delete" }
		add_tag => [ "_grok_groupdel_success" ]
	    }
	}

	mutate {
		add_field => { "bc_customerName" => "${BC_CUSTOMER_NAME}" }
		add_field => { "bc_messageType" => "linux_auth" }
		add_field => { "bc_apiToken" => "${BC_API_TOKEN}" }
	}
    }
}

output {
    stdout { codec => json }
    if [type] == "auth" {
      http {
        url => "${BC_URL}"
        http_method => "post"
        format => "json"
      }
    }
}




