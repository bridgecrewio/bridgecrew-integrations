    ## Collect transaction data over TCP - no filters necessary
            input {
                file {
                    path => ["/var/log/meraki_events.log"]
                    type => "events"
                }
                file {
                    path => ["/var/log/meraki_ids-alerts.log"]
                    type => "ids"
                }
                file {
                    path => ["/var/log/meraki_urls.log"]
                    type => "urls"
                }
                file {
                    path => ["/var/log/meraki_flows.log"]
                    type => "flows"
                }
            }

            filter {
                if [type] == "ids" {

                    grok {

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IP:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{GREEDYDATA:kind} signature=%{GREEDYDATA:signature} priority=%{WORD:prority} dhost=%{COMMONMAC:dhost} direction=%{WORD:direction} protocol=%{GREEDYDATA:protocol} src=%{IPV4:src_ip}:%{WORD:src_port} dst=%{IPV4:dst_ip}:%{WORD:dst_port} message=%{GREEDYDATA:ids_message}" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IP:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{GREEDYDATA:kind} signature=%{GREEDYDATA:signature} priority=%{WORD:prority} timestamp=%{BASE10NUM:timestamp2} shost=%{COMMONMAC:shost} direction=%{WORD:direction} protocol=%{GREEDYDATA:protocol} src=%{IPV4:src}:%{INT:src_port} dst=%{IPV4:dst}:%{INT:dst_port} message: %{GREEDYDATA:ids_message}" }

                    }
                }
                if [type] == "events" {

                    grok {

                        patterns_dir => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} urls src=%{IPV4:url_src}:%{INT:url_src_port} dst=%{IPV4:dst_ip}:%{INT:dst_port} mac=%{COMMONMAC:mac} agent=%{QS:agent} request: %{WORD:request_type} %{URL}" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{WORD:action} url='%{URL} category0='%{GREEDYDATA:uri_type}' server='%{IPV4:server_ip}:%{INT:server_port}'" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{WORD:action} url='%{URL} category0='%{GREEDYDATA:uri_type}'" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{GREEDYDATA:protocol} of ip %{IPV4:client_ip} from %{WORD:client} mac %{COMMONMAC:server_mac} for client mac %{COMMONMAC:client_mac} from router %{IPV4:router} on subnet %{IPV4:subnet} with dns %{IPV4:dns1}, %{IPV4:dns2}" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{GREEDYDATA:protocol} of ip %{IPV4:client_ip} from %{WORD:client} mac %{COMMONMAC:server_mac} for client mac %{COMMONMAC:client_mac} from router %{IPV4:router} on subnet %{IPV4:subnet} with dns %{IPV4:dns1}" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{GREEDYDATA:vpn}: %{GREEDYDATA:vpn_error}." }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' client_ip='%{IPV4:client_ip}' aid='%{INT:aid}'" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' aid='%{INT:aid}'" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' reason='%{INT:reason}' instigator='%{INT:instigator}' duration='%{BASE10NUM:duration}' auth_neg_failed='%{INT:auth_neg_failed}' is_wpa='%{INT:is_wpa}' aid='%{INT:aid}'" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' client_ip='%{IPV4:client_ip}' channel='%{INT:channel}' rssi='%{INT:rssi}' aid='%{INT:aid}'" }

                        # Using this as a catch all. I will use whats found with this and create an actual filter for the line.

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events %{GREEDYDATA:message_new}" }


                    }
                }
                if [type] == "urls" {

                    grok {


                        patterns_dir => "${LL_PATTERN_DIR:/usr/share/logstash/config/patterns.d}"

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IP:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} src=%{IPV4:src_ip}:%{WORD:src_port} dst=%{IPV4:dst_ip}:%{WORD:dst_port} mac=%{COMMONMAC:mac} request: %{GREEDYDATA:request} %{URL}" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IP:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} src=%{IPV4:src_ip}:%{WORD:src_port} dst=%{IPV4:dst_ip}:%{WORD:dst_port} mac=%{COMMONMAC:mac} agent=%{QS:agent} request: %{GREEDYDATA:request} %{URL}" }

                    }
                }
                if [type] == "flows" {

                    grok {

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IP:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} src=%{IPV4:src_ip} dst=%{IPV4:dst_ip} mac=%{COMMONMAC:mac} protocol=%{WORD:protocol} sport=%{WORD:sport} dport=%{WORD:dport} pattern:%{GREEDYDATA:pattern}" }

                        match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IP:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} src=%{IPV4:src_ip} dst=%{IPV4:dst_ip} protocol=%{WORD:protocol} sport=%{WORD:sport} dport=%{WORD:dport} pattern:%{GREEDYDATA:pattern}" }


                    }
                }
                # If the exported data already contained a parsed timestamp,
                # use that as the entry's official timestamp.
                date {
                    locale => "en"
                    match => ["time", "UNIX"]
                    target => "@timestamp"
                    remove_field => ["time"]
                }
                mutate {
                    add_field => { "bc_customerName" => "${BC_CUSTOMER_NAME}" }
                    add_field => { "bc_apiToken" => "${BC_API_TOKEN}" }
                    add_field => { "bc_messageType" => "meraki" }
                }

            }


        ## Output the record to an appropriate index in Elastic Search
            output {
                stdout { codec => json }
                http {
                    url => "${BC_URL}"
                    http_method => "post"
                    format => "json"
                }
            }
